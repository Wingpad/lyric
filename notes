LObject* LObject_get(LObject* self, char* name);
LFunction* LObject_lift(LObject* self, char* name, char* types);
void LObject_set(LObject* self, char* name, void* newValue);
LObject* LObject_invoke(LObject* self, char* types, ...);
LObject* LFunction_invoke(LFunction* function, ...);


var i = new Int()
// -> LObject* i = LObject_invoke(LInt, NULL, NULL);

var j = new Int(N->I(4))
// -> LObject* j = LObject_invoke(LInt, "I", <ptr to zero>, NULL);

var k = i + j
// -> LObject* k = LFunction_invoke(LObject_lift(i, "plus", "LInt"), k, NULL);

class Test {
  static function staticTest(value: Int) : Test {
    // ...
  }


  static function staticTest(value: String) : Test {
    // ...
  }


  function normalTest(value: Int) : Int {
    // ...
  }


  function normalTest(value: String) : String {
    // ...
  }


  function normalTest(value: String) : Int { // --> Conflicts with another definition
    // ...
  }


  var lambdaTest = (value: Int) -> {
    // ...
  }
}


var myTest = Test();


Test.staticTest       // --> Function invocation expected
Test::staticTest      // --> Ambiguous Function Reference
Test::staticTest<Int> // OK -> Function<String, String>


Test::normalTest      // --> cannot refer to "normalTest" in a static context
myTest.normalTest     // --> function invocation expected
myTest::normalTest    // --> Ambiguous Function Reference
myTest::normalTest<String> // OK -> Function<String, String>
// Internally sets 'self' of the returned Function to myTest
// LObject_lift(myTest, "normalTest", "LString")


// ::something -> Invalid
// @::something
// something.something::something


LType : Interface
- isNative()                      -> boolean
- getIdentifier()                 -> String
- getName()                       -> String
- getParameters()                 -> List<LType>
- isAssignableFrom(LType other)   -> boolean

LInvocable : Interface
- invoke(List<LExpression> args)  -> LFunction
- isObject()                      -> boolean

LScope

LFunction
- isLocal()
- isAnonymous()

LElement
- toString()
- needsSemicolon()


LObject extends Scope


myTest.lambdaTest // --> OK
